// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Wave = (function(_super) {
    __extends(Wave, _super);

    function Wave() {
      _ref = Wave.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Wave.prototype.defaults = {
      amount: 10
    };

    Wave.prototype.initialize = function() {
      var dx, path, y,
        _this = this;
      if (!(path = this.get('path'))) {
        path = new paper.Path();
        this.set({
          path: path
        });
      }
      if (this.get('amount') < 2) {
        dx = paper.view.viewSize.width;
      } else {
        dx = paper.view.viewSize.width / (this.get('amount') - 1);
      }
      y = paper.view.viewSize.height * 0.5;
      _.each(_.range(this.get('amount')), function(i) {
        var segment;
        segment = path.add(new paper.Point(dx * i, y));
        if (i === 0 || i === _this.get('amount') - 1) {
          return segment.fixed = true;
        }
      });
      path.strokeColor = 'white';
      return path.smooth();
    };

    return Wave;

  })(Backbone.Model);

  this.WaveOps = (function(_super) {
    __extends(WaveOps, _super);

    function WaveOps() {
      this._dripFrame = __bind(this._dripFrame, this);
      _ref1 = WaveOps.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    WaveOps.prototype.initialize = function() {
      if (!this.get('target')) {
        this.set({
          target: new Wave()
        });
      }
      return paper.view.on('frame', this._dripFrame);
    };

    WaveOps.prototype.drip = function(pos, force) {
      var path, point, segment;
      path = this.get('target').get('path');
      segment = _.sample(path.segments);
      if (segment.fixed) {
        return;
      }
      point = segment.point;
      point.y += force;
      if (segment.previous && !segment.previous.point.fixed) {
        segment.previous.point.y += force * -0.8;
      }
      if (segment.next && !segment.next.point.fixed) {
        return segment.next.point.y += force * -0.8;
      }
    };

    WaveOps.prototype._dripFrame = function(e) {
      var dynamics, path,
        _this = this;
      dynamics = {
        mass: 80,
        friction: 0.9,
        strength: 0.1,
        restLength: 100
      };
      dynamics.invMass = 1 / dynamics.mass;
      dynamics.mamb = dynamics.invMass * dynamics.invMass;
      path = this.get('target').get('path');
      _.each(path.segments, function(segment, idx) {
        var delta, deltaX, dist, dy, force, normDistStrength, point, ty;
        if (segment.fixed) {
          return;
        }
        point = segment.point;
        force = 1 - dynamics.friction * 0.0001;
        ty = paper.view.viewSize.height * 0.5;
        dy = (point.y - (point.py || point.y)) * force;
        point.py = point.y;
        point.y = Math.max(point.y + dy, 0);
        if (!segment.previous) {
          return;
        }
        delta = point.y - segment.previous.point.y;
        deltaX = point.x - segment.previous.point.x;
        if (delta === 0) {
          return;
        }
        dist = Math.abs(Math.sqrt(delta * delta + deltaX * deltaX));
        normDistStrength = (dist - dynamics.restLength) / (dist * dynamics.mamb) * dynamics.strength;
        delta = delta * normDistStrength * dynamics.invMass * 0.2;
        point.y += delta;
        return segment.previous.point.y -= delta;
      });
      return path.smooth();
    };

    return WaveOps;

  })(Backbone.Model);

}).call(this);
