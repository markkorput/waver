// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Wave = (function(_super) {
    __extends(Wave, _super);

    function Wave() {
      _ref = Wave.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Wave.prototype.defaults = {
      amount: 10
    };

    Wave.prototype.initialize = function() {
      var dx, path, y,
        _this = this;
      if (!(path = this.get('path'))) {
        path = new paper.Path();
        this.set({
          path: path
        });
      }
      if (this.get('amount') < 2) {
        dx = paper.view.viewSize.width;
      } else {
        dx = paper.view.viewSize.width / (this.get('amount') - 1);
      }
      y = paper.view.viewSize.height * 0.5;
      _.each(_.range(this.get('amount')), function(i) {
        var segment;
        segment = path.add(new paper.Point(dx * i, y));
        if (i === 0 || i === _this.get('amount') - 1) {
          return segment.fixed = true;
        }
      });
      path.strokeColor = 'white';
      return path.smooth();
    };

    return Wave;

  })(Backbone.Model);

  this.WaveOps = (function(_super) {
    __extends(WaveOps, _super);

    function WaveOps() {
      this._dripFrame = __bind(this._dripFrame, this);
      _ref1 = WaveOps.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    WaveOps.prototype.initialize = function() {
      if (!this.get('target')) {
        this.set({
          target: new Wave()
        });
      }
      return paper.view.on('frame', this._dripFrame);
    };

    WaveOps.prototype.drip = function(pos) {
      return this.dripPos = pos;
    };

    WaveOps.prototype._dripFrame = function(event) {
      var _this = this;
      this.pathHeight || (this.pathHeight = 0);
      this.pathHeight += (paper.view.center.y - (this.dripPos || paper.view.center).y - this.pathHeight) / 10;
      return _.each(this.get('target').get('path').segments, function(segment, i) {
        var sinHeight, sinSeed, yPos;
        sinSeed = event.count + (i + i % 10) * 100;
        sinHeight = Math.sin(sinSeed / 200) * _this.pathHeight;
        yPos = Math.sin(sinSeed / 100) * sinHeight + paper.view.viewSize.height / 2;
        return segment.point.y = yPos;
      });
    };

    return WaveOps;

  })(Backbone.Model);

}).call(this);
